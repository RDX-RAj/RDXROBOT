import html

from telegram import Chat, InlineKeyboardButton, InlineKeyboardMarkup, ParseMode, Update
from telegram.error import BadRequest, Unauthorized
from telegram.ext import (
    CallbackContext,
    CallbackQueryHandler,
    CommandHandler,
    Filters,
    MessageHandler,
)
from telegram.utils.helpers import mention_html

from RDXROBOT import DRAGONS, LOGGER, TIGERS, WOLVES, dispatcher
from RDXROBOT.modules.helper_funcs.chat_status import user_admin, user_not_admin
from RDXROBOT.modules.log_channel import loggable
from RDXROBOT.modules.sql import reporting_sql as sql

REPORT_GROUP = 12
REPORT_IMMUNE_USERS = DRAGONS + TIGERS + WOLVES


@user_admin
def report_setting(update: Update, context: CallbackContext):
    bot, args = context.bot, context.args
    chat = update.effective_chat
    msg = update.effective_message

    if chat.type == chat.PRIVATE:
        if len(args) >= 1:
            if args[0] in ("yes", "on"):
                sql.set_user_setting(chat.id, True)
                msg.reply_text(
                    "‡πè ·¥õ·¥ú Ä…¥·¥á·¥Ö ·¥è…¥  Ä·¥á·¥ò·¥è Ä·¥õ…™…¥…¢ !  è·¥è·¥ú' ü ü  ô·¥á …¥·¥è·¥õ…™“ì…™·¥á·¥Ö ·¥° ú·¥á…¥·¥á·¥†·¥á Ä ·¥Ä…¥ è·¥è…¥·¥á  Ä·¥á·¥ò·¥è Ä·¥õs s·¥è·¥ç·¥á·¥õ ú…™…¥…¢."
                )

            elif args[0] in ("no", "off"):
                sql.set_user_setting(chat.id, False)
                msg.reply_text("‡πè ·¥õ·¥ú Ä…¥·¥á·¥Ö ·¥è“ì“ì  Ä·¥á·¥ò·¥è Ä·¥õ…™…¥…¢ !  è·¥è·¥ú ·¥°·¥è…¥·¥õ …¢·¥á·¥õ ·¥Ä…¥ è  Ä·¥á·¥ò·¥è Ä·¥õs.")
        else:
            msg.reply_text(
                f"‡πè  è·¥è·¥ú Ä ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ  Ä·¥á·¥ò·¥è Ä·¥õ ·¥ò Ä·¥á“ì·¥á Ä·¥á…¥·¥Ñ·¥á …™s ‚û† `{sql.user_should_report(chat.id)}`",
                parse_mode=ParseMode.MARKDOWN,
            )

    else:
        if len(args) >= 1:
            if args[0] in ("yes", "on"):
                sql.set_chat_setting(chat.id, True)
                msg.reply_text(
                    "‡πè ·¥õ·¥ú Ä…¥·¥á·¥Ö ·¥è…¥  Ä·¥á·¥ò·¥è Ä·¥õ…™…¥…¢ ! ·¥Ä·¥Ö·¥ç…™…¥s ·¥° ú·¥è  ú·¥Ä·¥†·¥á ·¥õ·¥ú Ä…¥·¥á·¥Ö ·¥è…¥  Ä·¥á·¥ò·¥è Ä·¥õs ·¥°…™ ü ü  ô·¥á …¥·¥è·¥õ…™“ì…™·¥á·¥Ö ·¥° ú·¥á…¥ / Ä·¥á·¥ò·¥è Ä·¥õ "
                    "·¥è Ä @admin …™s ·¥Ñ·¥Ä ü ü·¥á·¥Ö."
                )

            elif args[0] in ("no", "off"):
                sql.set_chat_setting(chat.id, False)
                msg.reply_text(
                    "‡πè ·¥õ·¥ú Ä…¥·¥á·¥Ö ·¥è“ì“ì  Ä·¥á·¥ò·¥è Ä·¥õ…™…¥…¢ ! …¥·¥è ·¥Ä·¥Ö·¥ç…™…¥s ·¥°…™ ü ü  ô·¥á …¥·¥è·¥õ…™“ì…™·¥á·¥Ö ·¥è…¥ /report ·¥è Ä @admin."
                )
        else:
            msg.reply_text(
                f"‡πè ·¥õ ú…™s …¢ Ä·¥è·¥ú·¥ò's ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ s·¥á·¥õ·¥õ…™…¥…¢ …™s ‚û† `{sql.chat_should_report(chat.id)}`",
                parse_mode=ParseMode.MARKDOWN,
            )


@user_not_admin
@loggable
def report(update: Update, context: CallbackContext) -> str:
    bot = context.bot
    args = context.args
    message = update.effective_message
    chat = update.effective_chat
    user = update.effective_user

    if chat and message.reply_to_message and sql.chat_should_report(chat.id):
        reported_user = message.reply_to_message.from_user
        chat_name = chat.title or chat.first or chat.username
        admin_list = chat.get_administrators()
        message = update.effective_message

        if not args:
            message.reply_text("‡πè ·¥Ä·¥Ö·¥Ö ·¥Ä  Ä·¥á·¥Äs·¥è…¥ “ì·¥è Ä  Ä·¥á·¥ò·¥è Ä·¥õ…™…¥…¢ “ì…™ Äs·¥õ.")
            return ""

        if user.id == reported_user.id:
            message.reply_text("‡πè ·¥ú ú  è·¥á·¥Ä ú, s·¥ú Ä·¥á s·¥ú Ä·¥á...·¥ç·¥Äs·¥è ·¥ç·¥ú·¥Ñ ú ?")
            return ""

        if user.id == bot.id:
            message.reply_text("‡πè …¥…™·¥Ñ·¥á ·¥õ Ä è.")
            return ""

        if reported_user.id in REPORT_IMMUNE_USERS:
            message.reply_text("‡πè ·¥ú ú ?  è·¥è·¥ú  Ä·¥á·¥ò·¥è Ä·¥õ…™…¥…¢ ·¥Ä ·¥Ö…™s·¥Äs·¥õ·¥á Ä ?")
            return ""

        if chat.username and chat.type == Chat.SUPERGROUP:

            reported = f"‡πè {mention_html(user.id, user.first_name)}  Ä·¥á·¥ò·¥è Ä·¥õ·¥á·¥Ö {mention_html(reported_user.id, reported_user.first_name)} ·¥õ·¥è ·¥õ ú·¥á ·¥Ä·¥Ö·¥ç…™…¥s !"

            msg = (
                f"<b>‡πè  Ä·¥á·¥ò·¥è Ä·¥õ ‚û† </b>{html.escape(chat.title)}\n"
                f"<b>‡πè  Ä·¥á·¥ò·¥è Ä·¥õ  ô è ‚û†</b> {mention_html(user.id, user.first_name)}(<code>{user.id}</code>)\n"
                f"<b>‡πè  Ä·¥á·¥ò·¥è Ä·¥õ·¥á·¥Ö ·¥ús·¥á Ä ‚û†</b> {mention_html(reported_user.id, reported_user.first_name)} (<code>{reported_user.id}</code>)\n"
            )
            link = f'<b>‡πè  Ä·¥á·¥ò·¥è Ä·¥õ·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥á ‚û†</b> <a href="https://t.me/{chat.username}/{message.reply_to_message.message_id}">·¥Ñ ü…™·¥Ñ·¥ã  ú·¥á Ä·¥á</a>'
            should_forward = False
            keyboard = [
                [
                    InlineKeyboardButton(
                        "·¥ç·¥áss·¥Ä…¢·¥á",
                        url=f"https://t.me/{chat.username}/{message.reply_to_message.message_id}",
                    )
                ],
                [
                    InlineKeyboardButton(
                        "·¥ã…™·¥Ñ·¥ã",
                        callback_data=f"report_{chat.id}=kick={reported_user.id}={reported_user.first_name}",
                    ),
                    InlineKeyboardButton(
                        " ô·¥Ä…¥",
                        callback_data=f"report_{chat.id}=banned={reported_user.id}={reported_user.first_name}",
                    ),
                ],
                [
                    InlineKeyboardButton(
                        "·¥Ö·¥á ü·¥á·¥õ·¥á ·¥ç·¥áss·¥Ä…¢·¥á",
                        callback_data=f"report_{chat.id}=delete={reported_user.id}={message.reply_to_message.message_id}",
                    )
                ],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
        else:
            reported = (
                f"‡πè {mention_html(user.id, user.first_name)}  Ä·¥á·¥ò·¥è Ä·¥õ·¥á·¥Ö "
                f"‡πè {mention_html(reported_user.id, reported_user.first_name)} ·¥õ·¥è ·¥õ ú·¥á ·¥Ä·¥Ö·¥ç…™…¥s !"
            )

            msg = f'‡πè {mention_html(user.id, user.first_name)} …™s ·¥Ñ·¥Ä ü ü…™…¥…¢ “ì·¥è Ä ·¥Ä·¥Ö·¥ç…™…¥s …™…¥ "{html.escape(chat_name)}"!'
            link = ""
            should_forward = True

        for admin in admin_list:
            if admin.user.is_bot:  # can't message bots
                continue

            if sql.user_should_report(admin.user.id):
                try:
                    if not chat.type == Chat.SUPERGROUP:
                        bot.send_message(
                            admin.user.id, msg + link, parse_mode=ParseMode.HTML
                        )

                        if should_forward:
                            message.reply_to_message.forward(admin.user.id)

                            if (
                                len(message.text.split()) > 1
                            ):  # If user is giving a reason, send his message too
                                message.forward(admin.user.id)
                    if not chat.username:
                        bot.send_message(
                            admin.user.id, msg + link, parse_mode=ParseMode.HTML
                        )

                        if should_forward:
                            message.reply_to_message.forward(admin.user.id)

                            if (
                                len(message.text.split()) > 1
                            ):  # If user is giving a reason, send his message too
                                message.forward(admin.user.id)

                    if chat.username and chat.type == Chat.SUPERGROUP:
                        bot.send_message(
                            admin.user.id,
                            msg + link,
                            parse_mode=ParseMode.HTML,
                            reply_markup=reply_markup,
                        )

                        if should_forward:
                            message.reply_to_message.forward(admin.user.id)

                            if (
                                len(message.text.split()) > 1
                            ):  # If user is giving a reason, send his message too
                                message.forward(admin.user.id)

                except Unauthorized:
                    pass
                except BadRequest as excp:  # TODO: cleanup exceptions
                    LOGGER.exception("‡πè ·¥áx·¥Ñ·¥á·¥ò·¥õ…™·¥è…¥ ·¥° ú…™ ü·¥á  Ä·¥á·¥ò·¥è Ä·¥õ…™…¥…¢ ·¥ús·¥á Ä")

        message.reply_to_message.reply_text(
            f"‡πè {mention_html(user.id, user.first_name)}  Ä·¥á·¥ò·¥è Ä·¥õ·¥á·¥Ö ·¥õ ú·¥á ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è ·¥õ ú·¥á ·¥Ä·¥Ö·¥ç…™…¥s.",
            parse_mode=ParseMode.HTML,
        )
        return msg

    return ""


def __migrate__(old_chat_id, new_chat_id):
    sql.migrate_chat(old_chat_id, new_chat_id)


def __chat_settings__(chat_id, _):
    return f"‡πè ·¥õ ú…™s ·¥Ñ ú·¥Ä·¥õ …™s s·¥á·¥õ·¥ú·¥ò ·¥õ·¥è s·¥á…¥·¥Ö ·¥ús·¥á Ä  Ä·¥á·¥ò·¥è Ä·¥õs ·¥õ·¥è ·¥Ä·¥Ö·¥ç…™…¥s, ·¥†…™·¥Ä /report ·¥Ä…¥·¥Ö @admin ‚û† `{sql.chat_should_report(chat_id)}`"


def __user_settings__(user_id):
    if sql.user_should_report(user_id) is True:
        text = "‡πè  è·¥è·¥ú ·¥°…™ ü ü  Ä·¥á·¥Ñ·¥á…™·¥†·¥á  Ä·¥á·¥ò·¥è Ä·¥õs “ì Ä·¥è·¥ç ·¥Ñ ú·¥Ä·¥õs  è·¥è·¥ú' Ä·¥á ·¥Ä·¥Ö·¥ç…™…¥."
    else:
        text = "‡πè  è·¥è·¥ú ·¥°…™ ü ü *…¥·¥è·¥õ*  Ä·¥á·¥Ñ·¥á…™·¥†·¥á  Ä·¥á·¥ò·¥è Ä·¥õs “ì Ä·¥è·¥ç ·¥Ñ ú·¥Ä·¥õs  è·¥è·¥ú' Ä·¥á ·¥Ä·¥Ö·¥ç…™…¥."
    return text


def buttons(update: Update, context: CallbackContext):
    bot = context.bot
    query = update.callback_query
    splitter = query.data.replace("report_", "").split("=")
    if splitter[1] == "kick":
        try:
            bot.kickChatMember(splitter[0], splitter[2])
            bot.unbanChatMember(splitter[0], splitter[2])
            query.answer("‡πè s·¥ú·¥Ñ·¥Ñ·¥ás“ì·¥ú ü ü è ·¥ã…™·¥Ñ·¥ã·¥á·¥Ö")
            return ""
        except Exception as err:
            query.answer("üõë “ì·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è ·¥ò·¥ú…¥·¥Ñ ú")
            bot.sendMessage(
                text=f"‡πè ·¥á Ä Ä·¥è Ä : {err}",
                chat_id=query.message.chat_id,
                parse_mode=ParseMode.HTML,
            )
    elif splitter[1] == "banned":
        try:
            bot.kickChatMember(splitter[0], splitter[2])
            query.answer("‚úÖ  s·¥ú·¥Ñ·¥Ñ·¥ás“ì·¥ú ü ü è  ô·¥Ä…¥…¥·¥á·¥Ö")
            return ""
        except Exception as err:
            bot.sendMessage(
                text=f"‡πè ·¥á Ä Ä·¥è Ä : {err}",
                chat_id=query.message.chat_id,
                parse_mode=ParseMode.HTML,
            )
            query.answer("üõë “ì·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è  ô·¥Ä…¥")
    elif splitter[1] == "delete":
        try:
            bot.deleteMessage(splitter[0], splitter[3])
            query.answer("‚úÖ ·¥ç·¥áss·¥Ä…¢·¥á ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö")
            return ""
        except Exception as err:
            bot.sendMessage(
                text=f"‡πè ·¥á Ä Ä·¥è Ä : {err}",
                chat_id=query.message.chat_id,
                parse_mode=ParseMode.HTML,
            )
            query.answer("üõë “ì·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è ·¥Ö·¥á ü·¥á·¥õ·¥á ·¥ç·¥áss·¥Ä…¢·¥á !")


__help__ = """
 ‚ùç / Ä·¥á·¥ò·¥è Ä·¥õ < Ä·¥á·¥Äs·¥è…¥>* ‚ûõ*  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è  Ä·¥á·¥ò·¥è Ä·¥õ …™·¥õ ·¥õ·¥è ·¥Ä·¥Ö·¥ç…™…¥s.
 
 ‚ùç @·¥Ä·¥Ö·¥ç…™…¥* ‚ûõ*  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è  Ä·¥á·¥ò·¥è Ä·¥õ …™·¥õ ·¥õ·¥è ·¥Ä·¥Ö·¥ç…™…¥s.
 
 ‚ùç *…¥·¥è·¥õ·¥á ‚ûõ* …¥·¥á…™·¥õ ú·¥á Ä ·¥è“ì ·¥õ ú·¥ás·¥á ·¥°…™ ü ü …¢·¥á·¥õ ·¥õ Ä…™…¢…¢·¥á Ä·¥á·¥Ö …™“ì ·¥ús·¥á·¥Ö  ô è ·¥Ä·¥Ö·¥ç…™…¥s.

 ‚úø *·¥Ä·¥Ö·¥ç…™…¥s ·¥è…¥ ü è* ‚úø

 ‚ùç / Ä·¥á·¥ò·¥è Ä·¥õs <·¥è…¥/·¥è“ì“ì>* ‚ûõ* ·¥Ñ ú·¥Ä…¥…¢·¥á  Ä·¥á·¥ò·¥è Ä·¥õ s·¥á·¥õ·¥õ…™…¥…¢, ·¥è Ä ·¥†…™·¥á·¥° ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ s·¥õ·¥Ä·¥õ·¥ús.
 
 ‚ùç …™“ì ·¥Ö·¥è…¥·¥á …™…¥ ·¥ò·¥ç, ·¥õ·¥è…¢…¢ ü·¥ás  è·¥è·¥ú Ä s·¥õ·¥Ä·¥õ·¥ús.
 
 ‚ùç …™“ì …™…¥ …¢ Ä·¥è·¥ú·¥ò, ·¥õ·¥è…¢…¢ ü·¥ás ·¥õ ú·¥Ä·¥õ …¢ Ä·¥è·¥ú·¥òs's s·¥õ·¥Ä·¥õ·¥ús.
"""

SETTING_HANDLER = CommandHandler("reports", report_setting, run_async=True)
REPORT_HANDLER = CommandHandler(
    "report", report, filters=Filters.chat_type.groups, run_async=True
)
ADMIN_REPORT_HANDLER = MessageHandler(
    Filters.regex(r"(?i)@admin(s)?"), report, run_async=True
)
REPORT_BUTTON_USER_HANDLER = CallbackQueryHandler(
    buttons, pattern=r"report_", run_async=True
)

dispatcher.add_handler(REPORT_BUTTON_USER_HANDLER)
dispatcher.add_handler(SETTING_HANDLER)
dispatcher.add_handler(REPORT_HANDLER, REPORT_GROUP)
dispatcher.add_handler(ADMIN_REPORT_HANDLER, REPORT_GROUP)

__mod_name__ = " Ä·¥á·¥ò·¥è Ä·¥õs"
__handlers__ = [
    (REPORT_HANDLER, REPORT_GROUP),
    (ADMIN_REPORT_HANDLER, REPORT_GROUP),
    (SETTING_HANDLER),
    ]
        
