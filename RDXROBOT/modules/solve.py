import requests
from RDXROBOT import telethn as tbot
from RDXROBOT.events import register

GPT_API_URL = "https://chatgpt.apinepdev.workers.dev"


@register(pattern="^/solve (.*)")
async def chat_gpt(event):
    if event.fwd_from:
        return

    query = event.pattern_match.group(1)

    if query:
        # Send "Please wait" message
        processing_message = await event.reply("üìù")

        try:
            # Make a request to GPT API
            response = requests.get(f"{GPT_API_URL}/?question={query}")

            if response.status_code == 200:
                # Extract the answer from the API response
                result = response.json()

                # Check if "join" key is present and remove it
                if "join" in result:
                    del result["join"]

                # Add signature to the answer
                answer = result.get("answer", "‚ùç …¥·¥è ·¥Ä…¥s·¥°·¥á Ä  Ä·¥á·¥Ñ·¥á…™·¥†·¥á·¥Ö “ì Ä·¥è·¥ç s·¥è ü·¥†…™…¥…¢ ·¥Ä…™.")
                signature = "\n\n‚ùç s·¥è ü·¥†…™…¥…¢  ô è ‚ûõ [‡πõ·¥Ä ·¥† …™ s  ú ·¥Ä ‡ºó](https://t.me/Avishaxbot)"
                reply_message = answer + signature

                # Edit the "Please wait" message with the final answer
                await processing_message.edit(reply_message)
            else:
                # If there's an error with the API, inform the user
                await processing_message.edit("Error communicating with ChatGPT API.")
        except requests.exceptions.RequestException as e:
            # Handle network-related errors
            await processing_message.edit(f"Error: {str(e)}. Please try again later.")
        except Exception as e:
            # Handle unexpected errors
            await processing_message.edit(f"Unexpected error: {str(e)}. Please try again later.")
    else:
        # Provide information about the correct command format
        await event.reply("‚ùç ·¥ò ü·¥á·¥Äs·¥á ·¥ò Ä·¥è·¥†…™·¥Ö·¥á ·¥Ä «´·¥ú·¥ás·¥õ…™·¥è…¥ after /solve ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.\n\n‚ùç “ì·¥è Ä ·¥áx·¥Ä·¥ç·¥ò ü·¥á ‚ûõ /solve ·¥° ú·¥Ä·¥õ …™s ·¥õ ú·¥á  ü·¥è…¢¬π¬π ·¥†·¥Ä ü·¥ú·¥á ?")


mod_name = "s·¥è ü·¥†·¥á"
help = """
 ‚ùç s·¥è ü·¥†·¥á ·¥õ ú·¥á ·¥Ä…¥ è s·¥ú ô·¥ä·¥á·¥Ñ·¥õs, ·¥Ä…¥ è ·¥Ñ ü·¥Äss, ·¥Ä…¥ è ·¥Ñ ú·¥Ä·¥ò·¥õ·¥á Ä ·¥Ä…¥ è  ü·¥Ä…¥…¢·¥ú·¥Ä…¢·¥á ·¥Ö·¥è·¥ú ô·¥õ üí≠

 ‚ùç /solve  *‚ûõ*  Ä·¥á·¥ò ü è ·¥õo «´·¥ú·¥ás·¥õ…™·¥è…¥s ·¥Ä…¥ è s·¥ú ô·¥ä·¥á·¥Ñ·¥õs ·¥Ä…¥ è ·¥Ñ ü·¥Äss. üí≠
 """
